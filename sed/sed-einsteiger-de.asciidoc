Der Streameditor `sed`. Erste Schritte.
=======================================
Frank Hofmann
:subtitle:
:doctype: book
:copyright: Frank Hofmann
:revnumber: 1.0
:Author Initials: FH
:edition: 1
:lang: de
:date: 27. März 2016
:numbered:

= Vorwort =

`sed` steht für Streameditor -- ein Programm, welches einen Datenstrom
mit Hilfe von Filtern verändert. Das beinhaltet bspw. das Löschen,
Suchen und Ersetzen von Zeichenketten auf der Basis von Regulären
Ausdrücken. `sed` sieht erstmal recht einfach aus, ist aber sehr mächtig
und flexibel im Alltagsgebrauch als Filter auf der Kommandozeile und in
Shellskripten.

== Struktur eines Filters ==

* vier Teile: `[Adresse]Aktion/Muster/Ersetzung/Flag`
** Adresse/Aktion:
** Muster: Regulärer Ausdruck
** Ersetzung: String
** Flag: steuert die Aktion -- was passiert, wenn das Muster zutrifft

== `sed` als Filter aufrufen ==

`sed` akzeptiert verschiedene Wege, über die es Filter entgegennimmt.

* als direkten Parameter beim Aufruf von `sed` -- über `stdin` oder als
Parameter.

.Filtern mittels `sed` nach einer Pipe
----
$ cat datei | sed 's/alfred/friedrich/'
----

.Filtern mittels `sed` ohne Pipe und mit direktem Aufruf der Datei
----
$ sed 's/alfred/friedrich/' datei
----

* in dem das `sed`-Skript in einer separaten Datei liegt (Referenzierung)

.Filtern mittels `sed` und dem Skript `sed.skript`
----
$ sed -f sed.skript datei
----

== Mehrere Filter miteinander kombinieren ==

Hierbei werden die einzelnen Anweisungen (Filter) in der Reihenfolge von
`sed` verarbeitet, wie sie im Aufruf genannt sind.

* einzelne Anweisungen (Filter) voneinander über ein Semikolon trennen

.Mehrere Filter mittels `;` aneinanderreihen
----
$ sed 's/alfred/friedrich/; s/[Hh]olger/michael/' datei
----

* jede Anweisung (Filter) mit `-e` einleiten

.Mehrere Filter mittels `-e` aneinanderreihen
----
$ sed -e 's/alfred/friedrich/' -e 's/[Hh]olger/michael/' datei
----

* die Fähigkeiten der bash ausnutzen (mehrere Zeilen)

== Die Ausgabe steuern ==

Im Standardfall gibt `sed` alle Zeilen der Eingabe aus. Um das zu
unterdrücken, nutzen Sie den Schalter `-n`. Von Nutzen ist `-n`, um nur
die Zeilen der Eingabe ausgeben, in denen ihr Filter tatsächlich
Veränderungen bewirkt hat. Dazu schließen Sie den Filter mit einem `p`
am Ende ab:

.Lediglich die Ersetzungen ausgeben
----
$ sed -n 's/alfred/friedrich/p' datei
----

== Beispiele ==

=== Finde alle Zeilen der Eingabe, welches ein bestimmtes Muster beinhalten ===

.Suche nach dem Muster `fho` in der Datei `logfile`, und Ausgabe aller betreffenden Zeilen
----
$ sed -n '/fho/p' logfile
2016-01-10 10:45:15 user fho logged in on /dev/tty1
2016-01-11 08:30:10 user fho logged in on /dev/tty2
2016-01-12 08:46:45 user fho logged in on /dev/pty1
2016-01-12 12:13:10 user fho logged out from /dev/pty1
$
----

.Suche alle Zeilen, die entweder auf 44 oder 45 enden
----
$ sed -n '/4[45]$/p' logfile
2016-01-12 14:45:12 login failed for user root from 10.10.17.44
2016-01-12 14:46:10 login failed for user root from 10.10.17.45
2016-01-12 14:57:10 login failed for user root from 10.10.17.45
$
----

=== Suchen und Ersetzen nach einem Muster in ausgewählten Zeilen ===

.Ersetze alle Vorkommen von `root` durch `alex` in Zeile 9
----
$ sed -n '9s/root/alex/p' logfile
2016-01-12 14:57:10 login failed for user alex from 10.10.17.45
$
----

.Ersetze alle Vorkommen von `root` durch `alex` in den Zeilen 4 bis 7
----
$ sed -n '4,7s/root/user/p' logfile
2016-01-12 14:45:12 login failed for user alex from 10.10.17.44
2016-01-12 14:46:10 login failed for user alex from 10.10.17.45
$
----

.Ersetze alle Vorkommen von `root` durch `alex` außerhalb der Zeilen 4 bis 7
----
$ sed -n '4,7!s/root/user/p' logfile
2016-01-12 14:57:10 login failed for user root from 10.10.17.45
$
----

=== Alle leeren Zeilen aus der Eingabe herausfiltern ===

.Muster `^d` für leere Zeilen, `d` zum Löschen
----
$ sed '/^$/d' logfile-with-empty-lines 
2016-01-10 10:45:15 user fho logged in on /dev/tty1
2016-01-11 08:30:10 user fho logged in on /dev/tty2
2016-01-12 08:45:12 user james logged in on /dev/tty1
2016-01-12 08:46:45 user fho logged in on /dev/pty1
2016-01-12 12:13:10 user fho logged out from /dev/pty1
2016-01-12 14:45:12 login failed for user root from 10.10.17.44
2016-01-12 14:46:10 login failed for user root from 10.10.17.45
2016-01-12 14:55:05 user james logged out from /dev/tty1
2016-01-12 14:57:10 login failed for user root from 10.10.17.45
$
----

== Weiterführende Dokumente ==

* Dale Dougherty: 'sed & awk', O'Reilly, http://shop.oreilly.com/product/9781565922259.do
* Jeffrey E. F. Friedl: 'Reguläre Ausdrücke', O'Reilly, http://shop.oreilly.com/product/9780596528126.do
* Frank Hofmann: GitHub-Repo mit ausführlichen Beispielen, https://github.com/hofmannedv/training-shell
