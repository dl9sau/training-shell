Die Programmiersprache `awk`. Erste Schritte.
=============================================
Frank Hofmann
:subtitle:
:doctype: book
:copyright: Frank Hofmann
:revnumber: 0.2
:Author Initials: FH
:edition: 1
:lang: de
:date: 28. April 2016
:numbered:

= Vorwort =

`awk` ist eine Programmiersprache, die am besten strukturierte Textdaten
verarbeiten kann. Das beinhaltet bspw. das Ausgeben, Löschen, Suchen und
Ersetzen von Zeichenketten auf der Basis von Regulären Ausdrücken und
Feldern. `awk` ist sehr mächtig und flexibel im Alltagsgebrauch als
Filter auf der Kommandozeile und in Shellskripten.

Der Name `awk` leitet sich aus den drei Anfangsbuchstaben der
Familiennamen der Entwickler Alfred V. Aho, Peter J. Weinberger und
Brian W. Kernighan ab.

= Voraussetzungen zum Verständnis =

Um dieses Tutorial zu verstehen, hilft Ihnen das Basiswissen im Umgang
mit der Kommandozeile. Die Kommandos/Werkzeuge `grep`, `vi(m)` und
`less` sollten Ihnen nicht fremd sein. Alle diese Werkzeuge sind in etwa
gleich, unterscheiden sich aber mit Nuancen zueinander.

`awk` benutzt Reguläre Ausdrücke zur Beschreibung von Mustern für
Zeichenketten. Dieses Tutorial setzt grundlegende Kenntnisse von RegEx
voraus. Für ein tieferes Wissen dazu hilft Ihnen das Buch 'Reguläre
Ausdrücke' von Jeffrey Friedl <<Friedl>>.

== `awk`-Programme benutzen ==

`awk`-Programme führt der `awk`-Interpreter aus. Auf Linux-Systemen
kommt meist die GNU-Variante namens `gawk` zum Einsatz (siehe <<gawk>>
und <<gawk-Debianpaket>>). In der Regel ist das über einen symbolischen
Link gelöst:

.Symbolischer Link zu `gawk` bei Debian GNU/Linux
----
$ which awk
/usr/bin/awk
$ ls -la $(which awk)
lrwxrwxrwx 1 root root 21 Apr 10 01:03 /usr/bin/awk -> /etc/alternatives/awk
$ ls -la /etc/alternatives/awk
lrwxrwxrwx 1 root root 13 Apr 10 14:28 /etc/alternatives/awk -> /usr/bin/gawk
$
----

=== Über `stdin` oder als direkten Parameter beim Aufruf von `awk` ===

Der Interpreter ist sehr flexibel und kann Daten und Anweisungen sowohl
über `stdin`, als auch aus einer Datei verarbeiten. Anweisungen
bezeichnet hier das `awk`-Programm zur Datenverarbeitung.

.Filtern mittels `awk` nach einer Pipe
----
$ cat datei | awk 'anweisungen'
----

.Filtern mittels `awk` ohne Pipe und mit direktem Aufruf der Datei
----
$ awk 'anweisungen' datei
----

=== `awk`-Programm als separate Datei ===

Einfache Anweisungsfolgen geben Sie noch direkt im Aufruf an. Werden
ihre `awk`-Programme komplexer, speichern Sie diese am besten in einer
separaten Datei. Im Aufruf erfolgt die Referenzierung über den Schalter
`-f` gefolgt von dem Namen für die Programmdatei. 

Wie Sie die Programmdatei benennen, ist unerheblich. Um die
Programmdatei von anderen Dokumenten besser zu unterscheiden, wäre die
Verwendung des Namensendes `.awk` eine Möglichkeit.

TIP: Anstatt von `-f` versteht `awk` auch den langen Schalter `--file`.

.Filtern mittels `awk` und dem Programm `skript.awk`
----
$ awk -f skript.awk datei
----

TIP: Bei den meisten Listings finden Sie in Klammern den Dateinamen des
`awk`-Beispiels. Damit können Sie das Programm sofort ausprobieren, ohne
das zuvor abtippen zu müssen.

== Aufbau eines `awk`-Programms ==

Ein vollständiges `awk`-Programm besteht aus mindestens einer Zeile.
Diese Zeile besteht wiederum aus zwei Komponenten -- einem Muster und
einer Aktionsfolge. Mindestens eines von beiden geben Sie an -- entweder
das Muster, oder die Aktionsfolge, oder beides.

.Aufbau eines `awk`-Programms
----
Muster { Aktionsfolge }
----

Die Aktionsfolge umfaßt einzelne Anweisungen, wobei das Minimum eine
Anweisung ist. Jede Aktionsfolge wird von `awk` in geschweiften Klammern
erwartet. Damit kann `awk` dieses vom Muster unterscheiden. Bitte
beachten Sie bei der Formulierung die beiden Leerzeichen -- eines nach
der öffnenden geschweiften Klammer und eines vor der schließenden
geschweiften Klammer. 

Nachfolgendes Beispiel umfaßt als Anweisung lediglich `print` und gibt
Zeile für Zeile den Inhalt der Datei `logfile` aus.

.Ausgabe einer Datei (nur Aktionsfolge)
----
$ awk '{ print }' logfile
2016-01-10 10:45:15 user fho logged in on /dev/tty1
2016-01-11 08:30:10 user fho logged in on /dev/tty2
2016-01-12 08:45:12 user james logged in on /dev/tty1
...
$
----

== Beispiele ==

=== Ausgeben einer Datei ===

Die nachfolgenden Aufrufe haben ihre Entsprechung in den
UNIX/Linux-Kommandos `cat`, `tac`, `head` und `tail`. Das Kommando `nl`
kommt nur zum Einsatz, um eine Zeilennummer zu ergänzen und die Wirkung
des `awk`-Kommandos besser zu zeigen.

== Danksagung ==

Vielen Dank an Thomas Osterried für Kritik und Verbesserungsvorschläge
zum vorliegenden Tutorial.

== Weiterführende Dokumente ==

* [[[Dougherty]]] Dale Dougherty: 'sed & awk', O'Reilly, http://shop.oreilly.com/product/9781565922259.do
* [[[Friedl]]] Jeffrey E. F. Friedl: 'Reguläre Ausdrücke', O'Reilly, http://shop.oreilly.com/product/9780596528126.do
* [[[gawk]]] `gawk` auf der Webseite des GNU-Projekts, https://www.gnu.org/software/gawk/
* [[[gawk-Debianpaket]]] Debianpaket zu `gawk`, https://packages.debian.org/jessie/gawk
* [[[Hofmann]]] Frank Hofmann: GitHub-Repo mit ausführlichen Beispielen, https://github.com/hofmannedv/training-shell
* [[[Wolf]]] Jürgen Wolf: 'Shell-Programmierung. Das umfassende Handbuch', Galileo Computing/Rheinwerk Verlag, ISBN 3-89842-683-1

