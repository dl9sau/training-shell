Die Programmiersprache `awk`. Erste Schritte.
=============================================
Frank Hofmann
:subtitle:
:doctype: book
:copyright: Frank Hofmann
:revnumber: 0.3
:Author Initials: FH
:edition: 1
:lang: de
:date: 29. April 2016
:numbered:

= Vorwort =

`awk` ist eine Programmiersprache, die am besten strukturierte Textdaten
verarbeiten kann. Das beinhaltet bspw. das Ausgeben, Löschen, Suchen und
Ersetzen von Zeichenketten auf der Basis von Regulären Ausdrücken und
Feldern. Die einzelnen Felder unterscheidet `awk` durch Trennzeichen.
`awk` ist sehr mächtig und flexibel im Alltagsgebrauch als Filter auf
der Kommandozeile und in Shellskripten.

Der Name `awk` leitet sich aus den Anfangsbuchstaben der Familiennamen
der drei ursprünglichen Entwickler Alfred V. Aho, Peter J. Weinberger
und Brian W. Kernighan ab.

= Voraussetzungen zum Verständnis =

Um dieses Tutorial zu verstehen, hilft Ihnen das Basiswissen im Umgang
mit der Kommandozeile. Die Kommandos/Werkzeuge `grep`, `vi(m)` und
`less` sollten Ihnen nicht fremd sein. Alle diese Werkzeuge sind in etwa
gleich, unterscheiden sich aber mit Nuancen zueinander.

`awk` benutzt Reguläre Ausdrücke zur Beschreibung von Mustern für
Zeichenketten. Dieses Tutorial setzt grundlegende Kenntnisse von RegEx
voraus. Für ein tieferes Wissen dazu hilft Ihnen das Buch 'Reguläre
Ausdrücke' von Jeffrey Friedl <<Friedl>>.

== `awk`-Programme benutzen ==

`awk`-Programme führt der `awk`-Interpreter aus. Auf Linux-Systemen
kommt meist die GNU-Variante namens `gawk` zum Einsatz (siehe <<gawk>>
und <<gawk-Debianpaket>>). In der Regel ist das über einen symbolischen
Link gelöst:

.Symbolischer Link zu `gawk` bei Debian GNU/Linux
----
$ which awk
/usr/bin/awk
$ ls -la $(which awk)
lrwxrwxrwx 1 root root 21 Apr 10 01:03 /usr/bin/awk -> /etc/alternatives/awk
$ ls -la /etc/alternatives/awk
lrwxrwxrwx 1 root root 13 Apr 10 14:28 /etc/alternatives/awk -> /usr/bin/gawk
$
----

=== Über `stdin` oder als direkten Parameter beim Aufruf von `awk` ===

Der Interpreter ist sehr flexibel und kann Daten und Anweisungen sowohl
über `stdin`, als auch aus einer Datei verarbeiten. Anweisungen
bezeichnet hier das `awk`-Programm zur Datenverarbeitung.

.Filtern mittels `awk` nach einer Pipe
----
$ cat datei | awk 'anweisungen'
----

.Filtern mittels `awk` ohne Pipe und mit direktem Aufruf der Datei
----
$ awk 'anweisungen' datei
----

=== `awk`-Programm als separate Datei ===

Einfache Anweisungsfolgen geben Sie noch direkt im Aufruf an. Werden
ihre `awk`-Programme komplexer, speichern Sie diese am besten in einer
separaten Datei. Im Aufruf erfolgt die Referenzierung über den Schalter
`-f` gefolgt von dem Namen für die Programmdatei. 

Wie Sie die Programmdatei benennen, ist unerheblich. Um die
Programmdatei von anderen Dokumenten besser zu unterscheiden, wäre die
Verwendung des Namensendes `.awk` eine Möglichkeit.

TIP: Anstatt von `-f` versteht `awk` auch den langen Schalter `--file`.

.Filtern mittels `awk` und dem Programm `skript.awk`
----
$ awk -f skript.awk datei
----

TIP: Bei den meisten Listings finden Sie in Klammern den Dateinamen des
`awk`-Beispiels. Damit können Sie das Programm sofort ausprobieren, ohne
das zuvor abtippen zu müssen.

=== `awk`-Programm als ausführbares Programm ===

Da `awk` auch eine (weniger bekannte) Programmiersprache ist, können Sie
ein entsprechendes ausführbares Programm als Skript abspeichern und
ausführen. Der Aufbau des Skriptdatei folgt dabei den üblichen Regeln,
wie sie bspw. auch bei Perl-, bash- und Python-Skripten gelten. Nach der
obligatorischen, einleitenden Shebang-Zeile mit dem expliziten Pfad zum
ausführenden Interpreter folgt das `awk`-Programm.

.`awk`-Programm als Skriptdatei (`output-content-with-condition.sh`)
----
#!/usr/bin/awk -f

/2016-01-11/ {
    print
}
----

Geben Sie der obigen Datei Ausführungsrechte via `chmod +x
output-content-with-condition.sh`, können Sie das Skript wie folgt auf
der Kommandozeile aufrufen:

.`awk`-Programm als Skriptdatei aufrufen
----
$ ./output-content-with-condition.sh logfile 
2016-01-11 08:30:10 user fho logged in on /dev/tty2
$
----

== Aufbau eines `awk`-Programms ==

Ein vollständiges `awk`-Programm besteht aus mindestens einer Zeile.
Diese Zeile besteht wiederum aus zwei Komponenten -- einem Muster und
einer Aktionsfolge. Sie geben entweder das Muster an, oder die
Aktionsfolge, oder beides.

.Prinzipieller Aufbau eines `awk`-Programms
----
Muster { Aktionsfolge }
----

Die Aktionsfolge umfaßt einzelne Anweisungen, wobei das Minimum eine
Anweisung ist. Jede Aktionsfolge wird von `awk` in geschweiften Klammern
erwartet. Damit kann `awk` dieses vom Muster unterscheiden. Bitte
beachten Sie bei der Formulierung die beiden Leerzeichen -- eines nach
der öffnenden geschweiften Klammer und eines vor der schließenden
geschweiften Klammer. 

Nachfolgendes Beispiel 1 umfaßt als Anweisung lediglich `print` und gibt
Zeile für Zeile den Inhalt der Datei `logfile` aus.

.Beispiel 1: Ausgabe einer Datei (nur Aktionsfolge) (`output-content.awk`)
----
$ awk '{ print }' logfile
2016-01-10 10:45:15 user fho logged in on /dev/tty1
2016-01-11 08:30:10 user fho logged in on /dev/tty2
2016-01-12 08:45:12 user james logged in on /dev/tty1
...
$
----

Das Beispiel 2 verbindet ein Muster mit einer Aktion. Aus der Datei
`logfile` werden nur die Zeilen ausgegeben, in denen das Muster
`2016-01-11` enthalten ist.

.Beispiel 2: Ausgabe einer Datei (Muster und Aktionsfolge) (`output-content-with-condition.awk`)
----
$ awk '/2016-01-11/ { print }' logfile
2016-01-11 08:30:10 user fho logged in on /dev/tty2
$
----

Geben Sie keine Aktion an, ergänzt `awk` automatisch als Aktion das
`print`-Statement (siehe Beispiel 3).

.Beispiel 3: Ausgabe einer Datei (Muster)
----
$ awk '/2016-01-11/' logfile
2016-01-11 08:30:10 user fho logged in on /dev/tty2
$
----

Wie bereits eingangs genannt, verarbeitet `awk` nicht nur einzelne
Aktionen, sondern ganze Aktionsfolgen. Jede einzelne Aktion geben Sie
auf einer einzelnen Zeile 

== Beispiele ==

=== Ausgeben einer Datei ===

Die nachfolgenden Aufrufe haben ihre Entsprechung in den
UNIX/Linux-Kommandos `cat`, `tac`, `head` und `tail`. Das Kommando `nl`
kommt nur zum Einsatz, um eine Zeilennummer zu ergänzen und die Wirkung
des `awk`-Kommandos besser zu zeigen.

Das Ausgeben einer betreffenden Zeile erfolgt mit der Anweisung `print`.

.Den gesamten Inhalt einfach ausgeben (`output-content.awk`)
----
$ nl logfile | awk '{ print }'
     1  2016-01-10 10:45:15 user fho logged in on /dev/tty1
     2  2016-01-11 08:30:10 user fho logged in on /dev/tty2
     3  2016-01-12 08:45:12 user james logged in on /dev/tty1
     4  2016-01-12 08:46:45 user fho logged in on /dev/pty1
     5  2016-01-12 12:13:10 user fho logged out from /dev/pty1
     6  2016-01-12 14:45:12 login failed for user root from 10.10.17.44
     7  2016-01-12 14:46:10 login failed for user root from 10.10.17.45
     8  2016-01-12 14:55:05 user james logged out from /dev/tty1
     9  2016-01-12 14:57:10 login failed for user root from 10.10.17.45
$
----

Über die vordefinierte Variable `$NR` und eine Bedingung geben Sie
lediglich die vierte Zeile der Datei `logfile` aus:

.Nur die vierte Zeile ausgeben (`output-content-line4.awk`)
----
$ nl logfile | awk 'NR == 4 { print }'
     4  2016-01-12 08:46:45 user fho logged in on /dev/pty1
$
----

Das Gegenstück ist die Ausgabe aller Zeilen außer der Zeile 4:

.Alles außer der vierten Zeile ausgeben (`output-content-without-line4.awk`)
----
$ nl logfile | awk 'NR != 4 { print }'
     1  2016-01-10 10:45:15 user fho logged in on /dev/tty1
     2  2016-01-11 08:30:10 user fho logged in on /dev/tty2
     3  2016-01-12 08:45:12 user james logged in on /dev/tty1
     5  2016-01-12 12:13:10 user fho logged out from /dev/pty1
     6  2016-01-12 14:45:12 login failed for user root from 10.10.17.44
     7  2016-01-12 14:46:10 login failed for user root from 10.10.17.45
     8  2016-01-12 14:55:05 user james logged out from /dev/tty1
     9  2016-01-12 14:57:10 login failed for user root from 10.10.17.45
$
----

Für die Ausgabe ausgewählter Zeilen existieren mehrere Varianten.
Variante 1 ist ein Mehrfachaufruf von `awk` und entspricht von der
Denkweise her der Kombination der beiden UNIX-Kommandos `head` und
`tail`:

.Nur die Zeilen vier bis sechs ausgeben (Variante 1)
----
$ nl logfile | head -6 | tail -3
     4  2016-01-12 08:46:45 user fho logged in on /dev/pty1
     5  2016-01-12 12:13:10 user fho logged out from /dev/pty1
     6  2016-01-12 14:45:12 login failed for user root from 10.10.17.44
$
$ nl logfile | awk 'NR > 3 { print }' | awk 'NR < 4 { print }'
     4  2016-01-12 08:46:45 user fho logged in on /dev/pty1
     5  2016-01-12 12:13:10 user fho logged out from /dev/pty1
     6  2016-01-12 14:45:12 login failed for user root from 10.10.17.44
$
----

Variante 2 verwendet eine UND-Verknüpfung beider Bedingungen mittels
`&&`:

.Nur die Zeilen vier bis sechs ausgeben (Variante 2) (`output-content-line4-6.awk`)
----
$ nl logfile | awk 'NR > 3 && NR < 7 { print }'
     4  2016-01-12 08:46:45 user fho logged in on /dev/pty1
     5  2016-01-12 12:13:10 user fho logged out from /dev/pty1
     6  2016-01-12 14:45:12 login failed for user root from 10.10.17.44
$
----

== Danksagung ==

Vielen Dank an Thomas Osterried, Axel Beckert und Elmar Heeb für Kritik
und Verbesserungsvorschläge zum vorliegenden Tutorial.

== Weiterführende Dokumente ==

* [[[Dougherty]]] Dale Dougherty: 'sed & awk', O'Reilly, http://shop.oreilly.com/product/9781565922259.do
* [[[Friedl]]] Jeffrey E. F. Friedl: 'Reguläre Ausdrücke', O'Reilly, http://shop.oreilly.com/product/9780596528126.do
* [[[gawk]]] `gawk` auf der Webseite des GNU-Projekts, https://www.gnu.org/software/gawk/
* [[[gawk-Debianpaket]]] Debianpaket zu `gawk`, https://packages.debian.org/jessie/gawk
* [[[Hofmann]]] Frank Hofmann: GitHub-Repo mit ausführlichen Beispielen, https://github.com/hofmannedv/training-shell
* [[[Wolf]]] Jürgen Wolf: 'Shell-Programmierung. Das umfassende Handbuch', Galileo Computing/Rheinwerk Verlag, ISBN 3-89842-683-1

